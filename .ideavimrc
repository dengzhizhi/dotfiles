" Selected Intellimacs modules
" https://github.com/MarcoIeni/intellimacs/blob/main/docs/KEYBINDINGS.org
" source ~/.intellimacs/spacemacs.vim
" source ~/.intellimacs/extra.vim
" source ~/.intellimacs/major.vim
source ~/.intellimacs/hybrid.vim

set surround
set NERDTree
set argtextobj
set highlightedyank
set ideajoin
set easymotion
set exchange
" Need to install the Which-key plugin (https://plugins.jetbrains.com/plugin/15976-which-key)
set which-key
set quickscope

set ignorecase smartcase
set so=5
set expandtab
set shiftwidth=4
set multiple-cursors
set commentary
set ideamarks
set showcmd
set notimeout
set undolevels=100

set idearefactormode=visual

" Must after spacemacs imports
set clipboard=

nnoremap <c-l> :nohl<cr>

nmap ,U <Action>(LocalHistory.ShowHistory)
nnoremap <space>; :
xnoremap <space>; :


" Uppercase last inputed word
nnoremap ,u gUiwe
inoremap ,u <ESC>gUiwgi

inoremap ,. <ESC>
inoremap ,,. ,<ESC>
inoremap ,<CR> ,<CR>
inoremap ,<SPACE> ,<SPACE>
inoremap ,<ESC> ,<ESC>
inoremap ,m ,

vnoremap ,. <ESC>
xnoremap ,. <ESC>
lnoremap ,. <ESC>
nnoremap ,. <ESC>

nnoremap ,k "
vnoremap ,k "

" Exchange two selections, delete one selection first and select the second region before running this key map
vnoremap ,x <ESC>`.``gvp``P
nnoremap ,x viw<ESC>`.``gvp``P

" Convert the word you just input to uppercase
nnoremap ,U mpgUiw`p:delm p<cr>
inoremap ,U <ESC>gUiwgi

nnoremap ,c :e ~/.ideavimrc<CR>
nnoremap ,C :source ~/.ideavimrc<CR>:echo ".ideavimrc reloaded"<CR>

" system clipboard
nnoremap ,y "+
vnoremap ,y "+
inoremap ,yp <c-r>+
cnoremap ,yp <c-r>+

" quick paste last yarn
nnoremap ,p "0p
vnoremap ,p "0p
inoremap ,p <c-r>0
cnoremap ,p <c-r>0

" quick paste last deleted
nnoremap ,y- "-p
inoremap ,y- <c-r>-
cnoremap ,y- <c-r>-

inoremap ,j <ESC>o

nnoremap ,g :%

inoremap jk <ESC>
inoremap kj <ESC>

nnoremap ,, ,
vnoremap ,, ,

" Semicolon leader mappings
nnoremap ;; ;
xnoremap ;; ;
onoremap ;; ;

xmap ;j <Plug>(easymotion-bd-w)
nmap ;j <Plug>(easymotion-bd-w)
omap ;j <Plug>(easymotion-bd-w)

let g:EasyMotion_re_anywhere="..........."
nmap ;k <Plug>(easymotion-jumptoanywhere)
xmap ;k <Plug>(easymotion-jumptoanywhere)
omap ;k <Plug>(easymotion-jumptoanywhere)

xmap ;l <Plug>(easymotion-bd-jk)
nmap ;l <Plug>(easymotion-bd-jk)
omap ;l <Plug>(easymotion-bd-jk)

nnoremap ;s gT
xnoremap ;s gT
nnoremap ;f gt
xnoremap ;f gt

nmap ;q <Action>(CloseEditor)
xmap ;q <Action>(CloseEditor)

" open file in cursor
nnoremap gf lB"pyt::e <c-r>p<cr>

" Macro
nnoremap QQ @q

"Swap two texts. (Delete the first text block, then select the second block,
"then press Control-Shift-X)

"remap split window
nmap <TAB>m <Action>(HideAllWindows)
nmap <TAB>o <Action>(HideAllWindows)

nnoremap <TAB>S <C-W>s
nnoremap <TAB>d <C-W>vgd
nnoremap <TAB>h <C-W>h
nnoremap <TAB>j <C-W>j
nnoremap <TAB>k <C-W>k
nnoremap <TAB>l <C-W>l
nnoremap <TAB>s <C-W>s
nnoremap <TAB>v <C-W>v
nnoremap <TAB>w <C-W>w
nnoremap <TAB><TAB> <C-W>w
nnoremap <TAB><Down> <C-W>j
nnoremap <TAB><Up> <C-W>k
nnoremap <TAB><Left> <C-W>h
nnoremap <TAB><Right> <C-W>l

nmap <TAB>L <Action>(MoveTabRight)
nmap <TAB>J <Action>(MoveTabDown)
nmap <TAB>K  <Action>(MoveEditorToOppositeTabGroup)
nmap <TAB>O <Action>(ChangeSplitOrientation)
nmap <TAB>q ZQ
nmap <TAB>Q <Action>(ReopenClosedTab)
nmap <TAB>c <Action>(RecentChangedFiles)
nmap <TAB>r <Action>(RecentFiles)

nmap <TAB>f <C-6>

" The original Tab
nnoremap <TAB>i <C-I>

nmap g<TAB> <Action>(Switcher)

"IDEA Action Mapping
nmap <Space>jj <Action>(emacsIDEAs.AceJump)
vmap <Space>jj <Action>(emacsIDEAs.AceJump)
nmap ZQ <Action>(CloseEditor)
nmap ZW <Action>(CloseAllEditorsButActive)
nmap <Space>a<Space> <Action>(GotoAction)
nnoremap <Space>si<Space> :NERDTreeFind<CR>
nnoremap <Space>pw<Space> :NERDTreeFocus<CR>
nmap <C-n> <Action>(SelectNextOccurrence)
" nmap <Space>vim<Space> <Action>(Tool_External Tools_MacVim)
nmap <Space>idc<Space> <Action>(Tool_External Tools_Vscode)
nmap <Space>vin<Space> <Action>(Tool_External Tools_Vin)
nmap <Space>vimr<Space> <Action>(Tool_External Tools_VimR)
xmap gF <Action>(Tool_External Tools_gF)

nmap <BS> <Action>(Back)
nmap <C-BS> <Action>(Forward)
nmap <Space>kj<Space> <Action>(Back)
nmap <C-o> <Action>(Back)
nmap <Space>kl<Space> <Action>(Forward)
nmap <C-]> <Action>(Forward)

nmap <Space>st<Space> <Action>(SurroundWith)
vnoremap <Space>st<Space> :<c-u>action SurroundWith<CR>
nmap <Space>se<Space> <Action>(SurroundWithEmmet)
vnoremap <Space>se<Space> :<c-u>action SurroundWithEmmet<CR>
nmap <Space>sl<Space> <Action>(SurroundWithLiveTemplate)
vnoremap <Space>sl<Space> :<c-u>action SurroundWithLiveTemplate<CR>

nmap <Space>rp<Space> <Action>(ManageRecentProjects)
nmap <Space>rc<Space> <Action>(RecentChanges)
nmap <Space>rcf<Space> <Action>(RecentChangedFiles)
nmap <Space>rof<Space> <Action>(RecentFiles)

nmap <Space>ch<Space> <Action>(CallHierarchy)

"nnoremap <Space><Space>fa<Space> :action AddToFavoritesPopup<CR>
"nnoremap <Space><Space>fw<Space> :action ActivateFavoritesToolWindow<CR>

nmap <Space>ccs<Space> <Action>(ChangeColorScheme)
nmap <Space>rsf<Space> <Action>(EditorResetFontSize)

nmap <Space>ge<Space> <Action>(GotoNextError)
nmap <Space>gpe<Space> <Action>(GotoPreviousError)
nmap <Space>fsk<Space> <Action>(GotoNextError)
nmap <Space>fsj<Space> <Action>(GotoPreviousError)

nmap <Space>gc<Space> <Action>(GotoClass)
nmap <Space>gf<Space> <Action>(GotoFile)
nmap <Space>sp<Space> <Action>(FileStructurePopup)

nmap <Space>newf<Space> <Action>(NewFile)
nmap <Space>newc<Space> <Action>(NewClass)
nmap <Space>newd<Space> <Action>(NewDir)
nmap <Space>newpi<Space> <Action>(NewPackageInfo)
nmap <Space>news<Space> <Action>(NewScratchFile)

nmap <Space>mvnr<Space> <Action>(Maven.Reimport)
nmap <Space>fsu<Space> <Action>(FlowJS.Restart.All.Servers)

nmap <Space>rcs<Space> <Action>(ChangeSignature)
nmap <Space>rem<Space> <Action>(ExtractMehtod)
vnoremap <Space>rem<Space> :<C-U>action ExtractMehtod<CR>
nmap <Space>rev<Space> <Action>(IntroduceVariable)
nmap <Space>rrn<Space> <Action>(RenameElement)
nmap <Space>ril<Space> <Action>(Inline)
nmap <Space>rpu<Space> <Action>(MembersPullUp)
nmap <Space>rrr<Space> <Action>(Refactorings.QuickListPopupAction)
vnoremap <Space>rrr<Space> :<C-U>action Refactorings.QuickListPopupAction<CR>
nmap <Space>mrev <Action>(IntroduceVariable)
vnoremap <Space>mrev :action IntroduceVariable<CR>
nmap <Space>mrei <Action>(Inline)
nmap <Space>mrcs <Action>(ChangeSignature)

nmap <Space>mgu <Action>(GotoSuperMethod)

nmap <Space><Space>` <Action>(ShowBookmarks)
nmap <Space><Space>m <Action>(ToggleBookmarkWithMnemonic)

"Copy
nmap <Space>cppt<Space> <Action>(CopyAsPlainText)
nmap <Space>cprt<Space> <Action>(CopyAsRichText)
vnoremap <Space>cppt<Space> :action CopyAsPlainText<CR>:<C-U>echo "Copied as plain text"<CR>gv
vnoremap <Space>cprt<Space> :action CopyAsRichText<CR>:<C-U>echo "Copied as rich text"<CR>gv
nmap <Space>cpe<Space> <Action>(CopyElement)
nmap <space>cpp<space> <Action>(CopyAbsolutePath)
nmap <space>cpf<space> <Action>(CopyPaths)
nmap <space>cpb<space> <Action>(CopyPathWithLineNumber)
nmap <Space>cpr<Space> <Action>(CopyReference)
nmap <space>cpow<space> <Action>(Tool_External Tools_GitLink)
xmap <space>cpow<space> <Action>(Tool_External Tools_GitLink)
nmap <space>cpgw<space> <Action>(Tool_External Tools_CopyGitLink)
xmap <space>cpgw<space> <Action>(Tool_External Tools_CopyGitLink)

"Scratch buffer
nmap <Space>ttnb<Space> <Action>(NewScratchBuffer)
nmap <Space>ttst<Space> <Action>(NewScratchBuffer)
nmap <Space>ttss<Space> :action NewScratchBuffer<CR>:sp<CR><C-W>w
nmap <Space>ttsv<Space> :action NewScratchBuffer<CR>:vsp<CR>
nmap <Space>ft<Space> <Action>(Scratch.ChangeLanguage)

"Indent
nmap <Space>kjr<Space> <Action>(ConvertIndentsToSpaces)
nmap <Space>kjt<Space> <Action>(ConvertIndentsToTabs)
vnoremap <Space>kjr<Space> :<C-U>action ConvertIndentsToSpaces<CR>
vnoremap <Space>kjt<Space> :<C-U>action ConvertIndentsToTabs<CR>

"debug
nmap <Space>bb<Space> <Action>(ToggleLineBreakpoint)
nmap <Space>bv<Space> <Action>(ViewBreakpoints)
nmap <Space>bv<Space> <Action>(ViewBreakpoints)
nmap <Space>be<Space> <Action>(EvaluateExpression)

"########## Convenient yanks ##########{{{
"Yank a line without line break
nnoremap yuu mp_yg_`p

"Copy a line without line break to clipboard
nnoremap yuc mp_"+yg_`p

"Copy a block without line break to clipboard
nnoremap yub mp"+yip`p

"Copy buffer
nnoremap yua :%y+<cr>

"}}}

"Toggle Wrap
nmap <Space>w<Space> <Action>(EditorToggleUseSoftWraps)

"AceJump
nmap gsf <Plug>(easymotion-f)
xmap gsf <Plug>(easymotion-f)
omap gsf <Plug>(easymotion-f)
nmap gsF <Plug>(easymotion-F)
xmap gsF <Plug>(easymotion-F)
omap gsF <Plug>(easymotion-F)
nmap gst <Plug>(easymotion-t)
xmap gst <Plug>(easymotion-t)
omap gst <Plug>(easymotion-t)
nmap gsT <Plug>(easymotion-T)
xmap gsT <Plug>(easymotion-T)
omap gsT <Plug>(easymotion-T)
nmap gsw <Plug>(easymotion-bd-w)
xmap gsw <Plug>(easymotion-bd-w)
omap gsw <Plug>(easymotion-bd-w)
nmap gsW <Plug>(easymotion-W)
xmap gsW <Plug>(easymotion-W)
omap gsW <Plug>(easymotion-W)
nmap gse <Plug>(easymotion-e)
xmap gse <Plug>(easymotion-e)
omap gse <Plug>(easymotion-e)
nmap gsE <Plug>(easymotion-E)
xmap gsE <Plug>(easymotion-E)
omap gsE <Plug>(easymotion-E)
nmap gsj <Plug>(easymotion-j)
xmap gsj <Plug>(easymotion-j)
omap gsj <Plug>(easymotion-j)
nmap gsk <Plug>(easymotion-k)
xmap gsk <Plug>(easymotion-k)
omap gsk <Plug>(easymotion-k)
nmap gsn <Plug>(easymotion-n)
xmap gsn <Plug>(easymotion-n)
omap gsn <Plug>(easymotion-n)
nmap gsN <Plug>(easymotion-N)
xmap gsN <Plug>(easymotion-N)
omap gsN <Plug>(easymotion-N)
nmap gs/ <Plug>(easymotion-sn)
xmap gs/ <Plug>(easymotion-sn)
omap gs/ <Plug>(easymotion-sn)
nmap gss <Plug>(easymotion-s)
xmap gss <Plug>(easymotion-s)
omap gss <Plug>(easymotion-s)
nmap gsS <Plug>(easymotion-s2)
xmap gsS <Plug>(easymotion-s2)
omap gsS <Plug>(easymotion-s2)
nmap gsg V<Plug>(easymotion-bd-jk)
xmap gsg V<Plug>(easymotion-bd-jk)
omap gsg V<Plug>(easymotion-bd-jk)

"Code assistent
nmap <Space>g<Space> <Action>(Generate)
nmap <Space>i<Space> <Action>(ShowIntentionActions)

" Commands
command! Scratch action NewScratchBuffer
command! Lang action Scratch.ChangeLanguage
command! NewC action NewClass
command! NewD action NewDir
command! ItT action ConvertIndentsToTabs
command! ItS action ConvertIndentsToSpaces

" Fighting Game Mapping
nmap <Space>efj<Space> viw<Action>(FindInPath)
vnoremap <Space>efj<Space> :action FindInPath<CR>
nmap <Space>efk<Space> viw<Action>(FindInPath)
vnoremap <Space>efk<Space> :action FindInPath<CR>
nmap <Space>efl<Space> <Action>(Switcher)
" TODO JDAG-532
" Ticket
nmap ,td       ccTODO TT-01 <esc>gccA<space>
nmap ,tb   ccBOOKMARK TT-01 <esc>gccA<space>
nnoremap ,tb BOOKMARK TT-01 <space>
inoremap ,td     TODO TT-01 <space>
inoremap ,tb BOOKMARK TT-01 <space>

" vim telescope
nmap <space>fefj<space> <Action>(GotoFile)
nmap <space>fefl<space> <Action>(Switcher)
nmap <Space>fefo<Space> <Action>(FileStructurePopup)
nmap <Space>fefi<Space> <Action>(ActivateProblemsViewToolWindow)

" vim lsp
nmap <space>f<space> <Action>(Javascript.Linters.EsLint.Fix)
nmap <space>ca<space> <Action>(Generate)
xmap <space>ca<space> <Action>(Generate)
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)
nunmap grr
nmap <nowait> gr <Action>(ShowUsages)

" peek
nmap <space>k space> <Action>(QuickJavaDoc)
nmap <space>ej<space> <Action>(QuickJavaDoc)
nmap <space>ek<space> <Action>(QuickImplementations)
nmap <space>el<space> <Action>(QuickTypeDefinition)
nmap <space>ep<space> <Action>(QuickPreview)
nmap <space>eu<space> <Action>(ShowErrorDescription)

" Highlight (need https://github.com/huoguangjin/MultiHighlight plugin)
nmap <space>fdj<space> :action MultiHighlight<CR>
nmap <space>fdl<space> :action MultiHighlight.ClearAction<CR>

" Mimic native selection
inoremap <s-left> <esc>lgh<s-left><s-left>
inoremap <s-right> <esc>lgh
inoremap <s-a-left> <esc>gh<s-a-left>
inoremap <s-a-right> <esc>lgh<s-a-right>
inoremap <s-m-left> <esc>gh<s-m-left>
inoremap <s-m-right> <esc>lgh<s-m-right>

" Others
nmap <space>s<space> <Action>(ToggleReadOnlyAttribute)
nmap <space>efo<space> <Action>(RecentChangedFiles)
